// ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨  
// DO NOT EDIT: Generated by model-codegen 
// ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ 
const { 
  BaoModel,
  PrimaryKeyConfig
} = require('../../../../src/model.js');


const { 
    UlidField,
    StringField,
    CreateDateField
} = require('../../../../src/fields.js');


const { TaggedPost } = require('./tagged-post.js');


class Tag extends BaoModel {
  static modelPrefix = 't';
  static iterable = true;
  static iterationBuckets = 10;
  
  static fields = {
    tagId: UlidField({ autoAssign: true, required: true }),
    name: StringField({ required: true }),
    createdAt: CreateDateField(),
  };

  static primaryKey = PrimaryKeyConfig('tagId', 'modelPrefix');



  async queryPosts(skCondition = null, options = {}) {
    const results = await TaggedPost.queryByIndex(
      'postsForTag',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }
  async queryRecentPosts(skCondition = null, options = {}) {
    const results = await TaggedPost.queryByIndex(
      'recentPostsForTag',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }
  async getPosts(mapSkCondition=null, limit=null, direction='ASC', startKey=null) {
    return await TaggedPost.getRelatedObjectsViaMap(
      "postsForTag",
      this._getPkValue(),
      "postId",
      mapSkCondition,
      limit,
      direction,
      startKey
    );
  }
  async getRecentPosts(mapSkCondition=null, limit=null, direction='ASC', startKey=null) {
    return await TaggedPost.getRelatedObjectsViaMap(
      "recentPostsForTag",
      this._getPkValue(),
      "postId",
      mapSkCondition,
      limit,
      direction,
      startKey
    );
  }


}

module.exports = { Tag };
