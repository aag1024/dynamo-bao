const fs = require("fs");
const path = require("path");
const { createLogger } = require("../utils/scriptLogger");

const logger = createLogger("ManifestGenerator");

function findModelFiles(dir) {
  let results = [];
  const items = fs.readdirSync(dir);

  items.forEach((item) => {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      results = results.concat(findModelFiles(fullPath));
    } else if (item.endsWith(".js")) {
      results.push(fullPath);
    }
  });

  return results;
}

function generateManifestFile(modelsDir, manifestPath) {
  logger.info(`Generating model manifest for directory: ${modelsDir}`);
  logger.info(`Output manifest file: ${manifestPath}`);

  if (!fs.existsSync(modelsDir)) {
    logger.warn(
      `Models directory does not exist, skipping manifest generation: ${modelsDir}`,
    );
    return;
  }

  const modelFiles = findModelFiles(modelsDir);
  const manifestDir = path.dirname(manifestPath);

  if (modelFiles.length === 0) {
    logger.warn("No model files found to generate a manifest.");
    return;
  }

  const imports = modelFiles
    .map((file, index) => {
      const relativePath = path.relative(manifestDir, file).replace(/\\/g, "/");
      return `import * as model${index} from '${relativePath}';`;
    })
    .join("\n");

  const exports = `export default {\n${modelFiles
    .map((_, index) => `  ...model${index}`)
    .join(",\n")}\n};`;

  const content = `// THIS FILE IS AUTO-GENERATED by dynamo-bao codegen.
// DO NOT EDIT DIRECTLY.
${imports}

${exports}
`;

  try {
    if (!fs.existsSync(manifestDir)) {
      fs.mkdirSync(manifestDir, { recursive: true });
    }
    fs.writeFileSync(manifestPath, content, "utf8");
    logger.info("Model manifest generated successfully.");
  } catch (error) {
    logger.error("Error writing model manifest file:", error);
    process.exit(1);
  }
}

module.exports = { generateManifestFile };
