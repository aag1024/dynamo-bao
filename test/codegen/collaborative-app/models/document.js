// ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨  
// DO NOT EDIT: Generated by model-codegen 
// ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ ğŸ§¨ 
const { 
  BaoModel,
  PrimaryKeyConfig,
  IndexConfig
} = require('dynamo-bao');

const {
  GSI_INDEX_ID1
} = require('dynamo-bao').constants;


const { 
    UlidField,
    RelatedField,
    StringField,
    CreateDateField,
    ModifiedDateField
} = require('dynamo-bao').fields;




const { DocumentPermission } = require('./document-permission');
const { ConnectionMapping } = require('./connection-mapping');

class Document extends BaoModel {
  static modelPrefix = 'd';
  static iterable = true;
  static iterationBuckets = 10;
  
  static fields = {
    documentId: UlidField({ autoAssign: true, required: true }),
    appId: RelatedField('App', { required: true }),
    title: StringField(),
    createdAt: CreateDateField(),
    modifiedAt: ModifiedDateField(),
    createdBy: RelatedField('User', { required: true }),
  };

  static primaryKey = PrimaryKeyConfig('documentId', 'modelPrefix');

  static indexes = {
    documentsByCreator: IndexConfig('createdBy', 'modifiedAt', GSI_INDEX_ID1),
  };


  async queryPermissions(skCondition = null, options = {}) {
    const results = await DocumentPermission.queryByIndex(
      'permissionsForDocument',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }
  async queryConnections(skCondition = null, options = {}) {
    const results = await ConnectionMapping.queryByIndex(
      'connectionsForDocument',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }


  async getApp() {
    return await this.getOrLoadRelatedField('appId');
  }

  async getCreatedBy() {
    return await this.getOrLoadRelatedField('createdBy');
  }
}

module.exports = { Document };
