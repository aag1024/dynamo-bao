// ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨  
// DO NOT EDIT: Generated by model-codegen 
// ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ 
import { 
  BaoModel,
  PrimaryKeyConfig,
  IndexConfig
} from '../../../../src/model.js';

import {
  GSI_INDEX_ID1,
  GSI_INDEX_ID2
} from '../../../../src/constants.js';

import { 
    UlidField,
    StringField,
    RelatedField,
    CreateDateField,
    ModifiedDateField
} from '../../../../src/fields.js';


import { Comment } from './comment.js';


class Post extends BaoModel {
  static modelPrefix = 'p';
  static iterable = true;
  static iterationBuckets = 1;
  
  static fields = {
    postId: UlidField({ autoAssign: true, required: true }),
    title: StringField({ required: true }),
    content: StringField(),
    userId: RelatedField('User', { required: true }),
    createdAt: CreateDateField(),
    modifiedAt: ModifiedDateField(),
  };

  static primaryKey = PrimaryKeyConfig('postId', 'modelPrefix');

  static indexes = {
    postsForUser: IndexConfig('userId', 'postId', GSI_INDEX_ID1),
    allPosts: IndexConfig('modelPrefix', 'createdAt', GSI_INDEX_ID2),
  };


  static async queryAllPosts(skCondition = null, options = {}) {
    const results = await this.queryByIndex(
      'allPosts',
      this.modelPrefix,
      skCondition,
      options
    );

    return results;
  }
  async queryComments(skCondition = null, options = {}) {
    const results = await Comment.queryByIndex(
      'commentsForPost',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }


  async getUser() {
    return await this.getOrLoadRelatedField('userId');
  }
}

export { Post };
