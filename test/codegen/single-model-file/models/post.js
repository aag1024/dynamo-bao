// ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨  
// DO NOT EDIT: Generated by model-codegen 
// ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ ðŸ§¨ 
const { 
  BaoModel,
  PrimaryKeyConfig,
  IndexConfig
} = require('dynamo-bao');

const {
  GSI_INDEX_ID1,
  GSI_INDEX_ID2
} = require('dynamo-bao').constants;


const { 
    UlidField,
    RelatedField,
    StringField,
    CreateDateField,
    VersionField
} = require('dynamo-bao').fields;




const { Comment } = require('./comment');
const { TaggedPost } = require('./tagged-post');

class Post extends BaoModel {
  static modelPrefix = 'p';
  static iterable = true;
  static iterationBuckets = 10;
  
  static fields = {
    postId: UlidField({ autoAssign: true }),
    userId: RelatedField('User', { required: true }),
    title: StringField({ required: true }),
    content: StringField({ required: true }),
    createdAt: CreateDateField(),
    VersionField: VersionField(),
  };

  static primaryKey = PrimaryKeyConfig('postId', 'modelPrefix');

  static indexes = {
    allPosts: IndexConfig('modelPrefix', 'postId', GSI_INDEX_ID1),
    postsForUser: IndexConfig('userId', 'createdAt', GSI_INDEX_ID2),
  };


  static async queryAllPosts(skCondition = null, options = {}) {
    const results = await this.queryByIndex(
      'allPosts',
      this.modelPrefix,
      skCondition,
      options
    );

    return results;
  }
  async queryComments(skCondition = null, options = {}) {
    const results = await Comment.queryByIndex(
      'commentsForPost',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }
  async queryTags(skCondition = null, options = {}) {
    const results = await TaggedPost.queryByIndex(
      'tagsForPost',
      this._getPkValue(),
      skCondition,
      options
    );

    return results;
  }
  async getTags(mapSkCondition=null, limit=null, direction='ASC', startKey=null) {
    return await TaggedPost.getRelatedObjectsViaMap(
      "tagsForPost",
      this._getPkValue(),
      "tagId",
      mapSkCondition,
      limit,
      direction,
      startKey
    );
  }


  async getUser() {
    return await this.getOrLoadRelatedField('userId');
  }
}

module.exports = { Post };
